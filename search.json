[{"path":"https://github.com/project-greenhouse/igniteR/articles/igniteR-overview.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Overview of igniteR","text":"igniteR simplifies Firebase Authentication integration R Shiny apps. vignette provides overview package’s features set Firebase Authentication.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/articles/igniteR-overview.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Overview of igniteR","text":"Configure Firebase project: Obtain Firebase API key. Set environment variable: Install package:","code":"Sys.setenv(FIREBASE_API_KEY = \"your-api-key\") devtools::install_github(\"project-greenhouse/igniteR\")"},{"path":[]},{"path":"https://github.com/project-greenhouse/igniteR/articles/igniteR-overview.html","id":"signing-up-users","dir":"Articles","previous_headings":"Core Functions","what":"Signing Up Users","title":"Overview of igniteR","text":"","code":"sign_up_password(\"newuser@example.com\", \"password123\")"},{"path":"https://github.com/project-greenhouse/igniteR/articles/igniteR-overview.html","id":"signing-in-users","dir":"Articles","previous_headings":"Core Functions","what":"Signing In Users","title":"Overview of igniteR","text":"detailed usage, see User Authentication vignette.","code":"auth <- sign_in_password(\"newuser@example.com\", \"password123\") print(auth$idToken)"},{"path":"https://github.com/project-greenhouse/igniteR/articles/shiny-integration.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using igniteR in Shiny App Development","text":"vignette demonstrates integrate igniteR Shiny application user authentication profile management. provides practical example setting Firebase Authentication within Shiny app deploying .","code":""},{"path":"https://github.com/project-greenhouse/igniteR/articles/shiny-integration.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Using igniteR in Shiny App Development","text":"Firebase Project Setup: Obtain Firebase API key. Set API key environment variable: Package Installation:","code":"Sys.setenv(FIREBASE_API_KEY = \"your-api-key\") devtools::install_github(\"your_username/igniteR\")"},{"path":"https://github.com/project-greenhouse/igniteR/articles/shiny-integration.html","id":"shiny-app-example","dir":"Articles","previous_headings":"","what":"Shiny App Example","title":"Using igniteR in Shiny App Development","text":"simple Shiny app demonstrating authentication basic user operations using igniteR.","code":"library(shiny) library(igniteR)  ui <- fluidPage(   titlePanel(\"Shiny App with igniteR\"),    sidebarLayout(     sidebarPanel(       textInput(\"email\", \"Email\"),       passwordInput(\"password\", \"Password\"),       actionButton(\"sign_in\", \"Sign In\"),       actionButton(\"sign_up\", \"Sign Up\"),       actionButton(\"reset\", \"Reset Password\"),       textOutput(\"auth_message\")     ),      mainPanel(       textOutput(\"welcome_message\"),       verbatimTextOutput(\"user_data\")     )   ) )  server <- function(input, output, session) {   user_data <- reactiveVal(NULL)    observeEvent(input$sign_in, {     tryCatch({       auth <- sign_in_password(input$email, input$password)       user_data(auth)       output$welcome_message <- renderText({         paste(\"Welcome,\", input$email)       })     }, error = function(e) {       output$auth_message <- renderText({         paste(\"Error:\", e$message)       })     })   })    observeEvent(input$sign_up, {     tryCatch({       sign_up_password(input$email, input$password)       output$auth_message <- renderText({         \"Account created successfully. Please sign in.\"       })     }, error = function(e) {       output$auth_message <- renderText({         paste(\"Error:\", e$message)       })     })   })    observeEvent(input$reset, {     tryCatch({       reset_password(input$email)       output$auth_message <- renderText({         \"Password reset email sent.\"       })     }, error = function(e) {       output$auth_message <- renderText({         paste(\"Error:\", e$message)       })     })   })    output$user_data <- renderPrint({     req(user_data())     get_user(user_data()$idToken)   }) }  shinyApp(ui, server)"},{"path":"https://github.com/project-greenhouse/igniteR/articles/shiny-integration.html","id":"deployment","dir":"Articles","previous_headings":"","what":"Deployment","title":"Using igniteR in Shiny App Development","text":"deploy app server shinyapps.io: Ensure FIREBASE_API_KEY environment variable set server. Deploy app using rsconnect package:","code":"rsconnect::deployApp(\"path/to/your/app\")"},{"path":"https://github.com/project-greenhouse/igniteR/articles/shiny-integration.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Using igniteR in Shiny App Development","text":"vignette demonstrates igniteR can used integrate Firebase Authentication Shiny applications, enabling secure user authentication workflows.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/articles/user-authentication.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"User Authentication with igniteR","text":"vignette provides examples user authentication workflows using igniteR package.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/articles/user-authentication.html","id":"signing-up-a-new-user","dir":"Articles","previous_headings":"","what":"Signing Up a New User","title":"User Authentication with igniteR","text":"","code":"# Create a new user account sign_up_password(\"user@example.com\", \"securepassword123\")"},{"path":"https://github.com/project-greenhouse/igniteR/articles/user-authentication.html","id":"signing-in","dir":"Articles","previous_headings":"","what":"Signing In","title":"User Authentication with igniteR","text":"","code":"# Authenticate an existing user auth <- sign_in_password(\"user@example.com\", \"securepassword123\") print(auth$idToken)"},{"path":"https://github.com/project-greenhouse/igniteR/articles/user-authentication.html","id":"retrieving-user-data","dir":"Articles","previous_headings":"","what":"Retrieving User Data","title":"User Authentication with igniteR","text":"","code":"# Get user profile information user_data <- get_user(auth$idToken) print(user_data$email)"},{"path":"https://github.com/project-greenhouse/igniteR/articles/user-authentication.html","id":"password-reset","dir":"Articles","previous_headings":"","what":"Password Reset","title":"User Authentication with igniteR","text":"","code":"# Send a password reset email reset_password(\"user@example.com\")"},{"path":"https://github.com/project-greenhouse/igniteR/articles/user-authentication.html","id":"updating-user-profile","dir":"Articles","previous_headings":"","what":"Updating User Profile","title":"User Authentication with igniteR","text":"```r # Update profile update_user( idToken = auth$idToken, displayName = “Updated Name”, photoUrl = “https://example.com/photo.jpg” )","code":""},{"path":"https://github.com/project-greenhouse/igniteR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lauren Green. Author, maintainer.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Green L (2024). igniteR: Streamlined Firebase Authentication R Shiny Applications. R package version 0.1.0, https://github.com/project-greenhouse/igniteR.","code":"@Manual{,   title = {igniteR: Streamlined Firebase Authentication for R Shiny Applications},   author = {Lauren Green},   year = {2024},   note = {R package version 0.1.0},   url = {https://github.com/project-greenhouse/igniteR}, }"},{"path":"https://github.com/project-greenhouse/igniteR/index.html","id":"igniter-","dir":"","previous_headings":"","what":"Streamlined Firebase Authentication for R Shiny Applications","title":"Streamlined Firebase Authentication for R Shiny Applications","text":"Simplified use Firebase Authentication Shiny Apps igniteR R package designed streamline integration Firebase Authentication services R applications, particularly Shiny apps. provides functions manage user authentication account operations via Firebase Authentication REST API. tools signing , signing , password resets, email verification, account management, igniteR simplifies implementation secure authentication workflows R developers.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Streamlined Firebase Authentication for R Shiny Applications","text":"Authentication: Securely identify app users Firebase Authentication. Account Management: Manage user accounts, including user creation, deletion, password reset, email verification. Configuration: Create config.yaml update .Renviron createConfig, scale use Firebase projects Authentication services different R projects.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Streamlined Firebase Authentication for R Shiny Applications","text":"igniteR currently development. released, can install directly CRAN: install development version GitHub, use:","code":"install.packages(\"igniteR\") # install.packages(\"devtools\") devtools::install_github(\"project-greenhouse/igniteR\")"},{"path":"https://github.com/project-greenhouse/igniteR/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Streamlined Firebase Authentication for R Shiny Applications","text":"’s quick example get started:","code":"library(igniteR)  # Set up your Firebase project credentials createConfig(   api_key = \"YOUR_API_KEY\",   projectId = \"YOUR_PROJECT_ID\",   authDomain = \"YOUR_AUTH_DOMAIN\",   storageBucket = \"YOUR_STORAGE_BUCKET\" )  # Sign up a new user signUpWithPassword(\"user@example.com\", \"password123\")  # Sign in an existing user auth <- signInWithPassword(\"user@example.com\", \"password123\")  # Send a password reset email resetPassword(\"user@example.com\")"},{"path":"https://github.com/project-greenhouse/igniteR/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Streamlined Firebase Authentication for R Shiny Applications","text":"Create Firebase Project: don’t already Firebase project, set one Firebase Console. Enable REST API: Ensure Firebase REST API enabled project settings. Install igniteR: Install development version igniteR using instructions .","code":""},{"path":"https://github.com/project-greenhouse/igniteR/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Streamlined Firebase Authentication for R Shiny Applications","text":"welcome contributions! ’d like report issues, suggest features, contribute code, please check Contributing Guidelines.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Streamlined Firebase Authentication for R Shiny Applications","text":"project licensed MIT License. See LICENSE file details.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Streamlined Firebase Authentication for R Shiny Applications","text":"Firebase powerful platform. R community making data-driven development accessible innovative.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_email.html","id":null,"dir":"Reference","previous_headings":"","what":"Change User Email using Firebase Auth REST API — change_email","title":"Change User Email using Firebase Auth REST API — change_email","text":"function changes email address user using Firebase Auth REST API.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_email.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change User Email using Firebase Auth REST API — change_email","text":"","code":"change_email(idToken, newEmail, returnSecureToken = FALSE)"},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_email.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change User Email using Firebase Auth REST API — change_email","text":"idToken string representing Firebase ID token user. newEmail string representing new email address. returnSecureToken Optional boolean. TRUE, returns new ID refresh token.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_email.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change User Email using Firebase Auth REST API — change_email","text":"list containing updated user data new tokens requested.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_email.html","id":"common-error-codes","dir":"Reference","previous_headings":"","what":"Common Error Codes","title":"Change User Email using Firebase Auth REST API — change_email","text":"INVALID_ID_TOKEN: provided ID token invalid. EMAIL_EXISTS: email address already use another account. INVALID_EMAIL: email address valid. CREDENTIAL_TOO_OLD_LOGIN_AGAIN: user needs sign changing email.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_email.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change User Email using Firebase Auth REST API — change_email","text":"","code":"if (FALSE) { # \\dontrun{ id_token <- \"user-id-token\" new_email <- \"newemail@example.com\" result <- change_email(id_token, new_email) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_password.html","id":null,"dir":"Reference","previous_headings":"","what":"Change User Password using Firebase Auth REST API — change_password","title":"Change User Password using Firebase Auth REST API — change_password","text":"function changes password user using Firebase Auth REST API.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_password.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change User Password using Firebase Auth REST API — change_password","text":"","code":"change_password(idToken, newPassword)"},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_password.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change User Password using Firebase Auth REST API — change_password","text":"idToken string representing Firebase ID token user. newPassword string representing new password.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_password.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change User Password using Firebase Auth REST API — change_password","text":"list containing response, including updated tokens successful.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_password.html","id":"common-error-codes","dir":"Reference","previous_headings":"","what":"Common Error Codes","title":"Change User Password using Firebase Auth REST API — change_password","text":"INVALID_ID_TOKEN: provided ID token invalid. WEAK_PASSWORD: new password strong enough. CREDENTIAL_TOO_OLD_LOGIN_AGAIN: user needs sign changing password.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/change_password.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change User Password using Firebase Auth REST API — change_password","text":"","code":"if (FALSE) { # \\dontrun{ id_token <- \"user-id-token\" new_password <- \"newsecurepassword\" response <- change_password(id_token, new_password) print(response) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/create_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Firebase Configuration YAML File — create_config","title":"Create a Firebase Configuration YAML File — create_config","text":"function generates config.yaml file Firebase project settings also updates project's .Renviron file variables.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/create_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Firebase Configuration YAML File — create_config","text":"","code":"create_config(   api_key,   projectId,   authDomain,   storageBucket,   databaseURL = NULL,   appId = NULL,   output_dir = \".\" )"},{"path":"https://github.com/project-greenhouse/igniteR/reference/create_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Firebase Configuration YAML File — create_config","text":"api_key Firebase API Key (required). projectId Firebase Project ID (required). authDomain Firebase Authentication Domain (required). storageBucket Firebase Storage Bucket (required). databaseURL Firebase Database URL (optional). appId Firebase App ID (optional). output_dir string specifying directory config.yaml file saved. Defaults current working directory. directory exist, created.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/create_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Firebase Configuration YAML File — create_config","text":"message indicating successful creation file environment variables.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/create_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Firebase Configuration YAML File — create_config","text":"","code":"if (FALSE) { # \\dontrun{ create_config(   api_key = \"example-key\",   projectId = \"example-id\",   authDomain = \"example-auth\",   storageBucket = \"example-bucket\" ) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/delete_account.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete User Account — delete_account","title":"Delete User Account — delete_account","text":"Permanently deletes user's account Firebase Authentication. Use caution Shiny applications action undone.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/delete_account.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete User Account — delete_account","text":"","code":"delete_account(idToken)"},{"path":"https://github.com/project-greenhouse/igniteR/reference/delete_account.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete User Account — delete_account","text":"idToken Character string. Firebase ID token authenticated user.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/delete_account.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete User Account — delete_account","text":"Invisible NULL success, throws error failure.","code":""},{"path":[]},{"path":"https://github.com/project-greenhouse/igniteR/reference/delete_account.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete User Account — delete_account","text":"","code":"if (FALSE) { # \\dontrun{ # After user confirms deletion auth_result <- sign_in_password(\"user@example.com\", \"password\")  # Delete the account delete_account(auth_result$idToken) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/get_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Get User Data using Firebase Auth REST API — get_user","title":"Get User Data using Firebase Auth REST API — get_user","text":"function retrieves user profile data using ID token via Firebase Auth REST API. retrieves Firebase configuration details environment variables.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/get_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get User Data using Firebase Auth REST API — get_user","text":"","code":"get_user(idToken)"},{"path":"https://github.com/project-greenhouse/igniteR/reference/get_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get User Data using Firebase Auth REST API — get_user","text":"idToken string representing Firebase ID token user.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/get_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get User Data using Firebase Auth REST API — get_user","text":"list containing user profile data. Includes fields : localId: unique identifier user. email: user's email address. emailVerified: Boolean indicating email verified. displayName: user's display name (set). photoUrl: user's profile photo URL (set). createdAt: Timestamp account creation. lastLoginAt: Timestamp last login.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/get_user.html","id":"common-error-codes","dir":"Reference","previous_headings":"","what":"Common Error Codes","title":"Get User Data using Firebase Auth REST API — get_user","text":"INVALID_ID_TOKEN: provided ID token invalid. USER_NOT_FOUND: user corresponding ID token found. TOKEN_EXPIRED: provided ID token expired.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/get_user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get User Data using Firebase Auth REST API — get_user","text":"","code":"if (FALSE) { # \\dontrun{ id_token <- \"user-id-token\" user_data <- get_user(id_token) print(user_data$email) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/igniteR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"igniteR: Firebase Authentication for R — igniteR-package","title":"igniteR: Firebase Authentication for R — igniteR-package","text":"igniteR package provides comprehensive interface Firebase Authentication REST API. allows R users integrate Firebase Authentication applications, enabling user management, session handling, profile updates.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/igniteR-package.html","id":"main-features","dir":"Reference","previous_headings":"","what":"Main Features","title":"igniteR: Firebase Authentication for R — igniteR-package","text":"User Authentication: sign_in_password - Sign email password sign_in_oauth - Sign OAuth providers sign_up_password - Create new user accounts Account Management: reset_password - Send password reset emails change_email - Update user email delete_account - Delete user accounts Email Operations: send_email_verification - Send email verification User Data Management: get_user - Retrieve user profile data","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/igniteR-package.html","id":"configuration","dir":"Reference","previous_headings":"","what":"Configuration","title":"igniteR: Firebase Authentication for R — igniteR-package","text":"using package, configure Firebase project: Set FIREBASE_API_KEY environment variable Firebase API key. Refer Firebase's REST API documentation additional details.","code":""},{"path":[]},{"path":"https://github.com/project-greenhouse/igniteR/reference/igniteR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"igniteR: Firebase Authentication for R — igniteR-package","text":"Maintainer: Lauren Green ghouse.performance@gmail.com","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/igniteR-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"igniteR: Firebase Authentication for R — igniteR-package","text":"","code":"if (FALSE) { # \\dontrun{ # Sign up a new user sign_up_password(\"user@example.com\", \"password123\")  # Sign in auth <- sign_in_password(\"user@example.com\", \"password123\")  # Get user profile profile <- get_user(auth$idToken) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/reset_password.html","id":null,"dir":"Reference","previous_headings":"","what":"Send Password Reset Email using Firebase Auth REST API — reset_password","title":"Send Password Reset Email using Firebase Auth REST API — reset_password","text":"function sends password reset email specified email address using Firebase Auth REST API. retrieves Firebase configuration details environment variables.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/reset_password.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send Password Reset Email using Firebase Auth REST API — reset_password","text":"","code":"reset_password(email)"},{"path":"https://github.com/project-greenhouse/igniteR/reference/reset_password.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send Password Reset Email using Firebase Auth REST API — reset_password","text":"email string representing user's email address.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/reset_password.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send Password Reset Email using Firebase Auth REST API — reset_password","text":"Invisible NULL success, throws error failure.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/reset_password.html","id":"common-error-codes","dir":"Reference","previous_headings":"","what":"Common Error Codes","title":"Send Password Reset Email using Firebase Auth REST API — reset_password","text":"EMAIL_NOT_FOUND: user record corresponding email. INVALID_EMAIL: email address valid.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/reset_password.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send Password Reset Email using Firebase Auth REST API — reset_password","text":"","code":"if (FALSE) { # \\dontrun{ email <- \"user@example.com\" reset_password(email) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/send_email_verification.html","id":null,"dir":"Reference","previous_headings":"","what":"Send Email Verification — send_email_verification","title":"Send Email Verification — send_email_verification","text":"Sends verification email user's email address. Important maintaining verified user status Shiny applications.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/send_email_verification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send Email Verification — send_email_verification","text":"","code":"send_email_verification(idToken)"},{"path":"https://github.com/project-greenhouse/igniteR/reference/send_email_verification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send Email Verification — send_email_verification","text":"idToken Character string. Firebase ID token authenticated user.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/send_email_verification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send Email Verification — send_email_verification","text":"Invisible NULL success, throws error failure.","code":""},{"path":[]},{"path":"https://github.com/project-greenhouse/igniteR/reference/send_email_verification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send Email Verification — send_email_verification","text":"","code":"if (FALSE) { # \\dontrun{ # After user signs in auth_result <- sign_in_password(\"user@example.com\", \"password\")  # Send verification email send_email_verification(auth_result$idToken) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_oauth.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign In with OAuth using Firebase Auth REST API — sign_in_oauth","title":"Sign In with OAuth using Firebase Auth REST API — sign_in_oauth","text":"function signs user using OAuth credentials via Firebase Auth REST API.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_oauth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign In with OAuth using Firebase Auth REST API — sign_in_oauth","text":"","code":"sign_in_oauth(provider, accessToken)"},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_oauth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign In with OAuth using Firebase Auth REST API — sign_in_oauth","text":"provider string representing OAuth provider (e.g., \"google.com\", \"facebook.com\"). accessToken string representing OAuth access token.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_oauth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sign In with OAuth using Firebase Auth REST API — sign_in_oauth","text":"list containing authentication response including idToken, refreshToken, etc.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_oauth.html","id":"common-error-codes","dir":"Reference","previous_headings":"","what":"Common Error Codes","title":"Sign In with OAuth using Firebase Auth REST API — sign_in_oauth","text":"INVALID_PROVIDER_ID: provider ID invalid. INVALID_OAUTH_TOKEN: OAuth token invalid. INVALID_OAUTH_PROVIDER: OAuth provider invalid.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_oauth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sign In with OAuth using Firebase Auth REST API — sign_in_oauth","text":"","code":"if (FALSE) { # \\dontrun{ provider <- \"google.com\" access_token <- \"oauth-access-token\" auth_result <- sign_in_oauth(provider, access_token) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_password.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign In with Email and Password — sign_in_password","title":"Sign In with Email and Password — sign_in_password","text":"Authenticates user using email password Firebase Authentication. Designed use Shiny applications manage user sessions.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_password.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign In with Email and Password — sign_in_password","text":"","code":"sign_in_password(email, password)"},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_password.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign In with Email and Password — sign_in_password","text":"email Character string. user's email address. password Character string. user's password.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_password.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sign In with Email and Password — sign_in_password","text":"list containing: idToken - Firebase ID token user email - user's email address refreshToken - Token can used refresh ID token expiresIn - Token expiration time seconds localId - uid authenticated user","code":""},{"path":[]},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_in_password.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sign In with Email and Password — sign_in_password","text":"","code":"if (FALSE) { # \\dontrun{ # In a Shiny app auth_result <- sign_in_password(   email = \"user@example.com\",   password = \"userpassword\" )  # Use the token for authenticated requests user_data <- get_user(auth_result$idToken) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_up_password.html","id":null,"dir":"Reference","previous_headings":"","what":"Sign Up with Email and Password using Firebase Auth REST API — sign_up_password","title":"Sign Up with Email and Password using Firebase Auth REST API — sign_up_password","text":"function creates new user account using email password via Firebase Auth REST API. retrieves Firebase configuration details directly environment variables.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_up_password.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sign Up with Email and Password using Firebase Auth REST API — sign_up_password","text":"","code":"sign_up_password(email, password)"},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_up_password.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sign Up with Email and Password using Firebase Auth REST API — sign_up_password","text":"email string representing user's email address. password string representing user's password.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_up_password.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sign Up with Email and Password using Firebase Auth REST API — sign_up_password","text":"list containing authentication response. Includes fields : idToken ID token authenticate Firebase services. refreshToken token refresh ID token expires. localId unique identifier user.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_up_password.html","id":"common-error-codes","dir":"Reference","previous_headings":"","what":"Common Error Codes","title":"Sign Up with Email and Password using Firebase Auth REST API — sign_up_password","text":"EMAIL_EXISTS: email address already use another account. OPERATION_NOT_ALLOWED: Email/password accounts enabled. WEAK_PASSWORD: password weak.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/sign_up_password.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sign Up with Email and Password using Firebase Auth REST API — sign_up_password","text":"","code":"if (FALSE) { # \\dontrun{ email <- \"newuser@example.com\" password <- \"newuserpassword\" user_data <- sign_up_password(email, password) print(user_data$localId) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/reference/update_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Update User Profile — update_user","title":"Update User Profile — update_user","text":"Updates user's profile information Firebase Authentication. Commonly used Shiny apps manage user profile data.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/update_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update User Profile — update_user","text":"","code":"update_user(idToken, displayName = NULL, photoUrl = NULL)"},{"path":"https://github.com/project-greenhouse/igniteR/reference/update_user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update User Profile — update_user","text":"idToken Character string. Firebase ID token authenticated user. displayName Optional character string. user's new display name. photoUrl Optional character string. URL user's new profile photo.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/update_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update User Profile — update_user","text":"list containing updated profile information, including: displayName: user's updated display name. photoUrl: user's updated profile photo URL. email: user's email address. localId: unique identifier user.","code":""},{"path":"https://github.com/project-greenhouse/igniteR/reference/update_user.html","id":"common-error-codes","dir":"Reference","previous_headings":"","what":"Common Error Codes","title":"Update User Profile — update_user","text":"INVALID_ID_TOKEN: provided ID token invalid. USER_DISABLED: user account disabled. TOKEN_EXPIRED: provided ID token expired.","code":""},{"path":[]},{"path":"https://github.com/project-greenhouse/igniteR/reference/update_user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update User Profile — update_user","text":"","code":"if (FALSE) { # \\dontrun{ # In a Shiny app auth_result <- signInWithPassword(\"user@example.com\", \"password\")  # Update the user's profile updated_profile <- update_user(   idToken = auth_result$idToken,   displayName = \"New Name\",   photoUrl = \"https://example.com/photo.jpg\" ) } # }"},{"path":"https://github.com/project-greenhouse/igniteR/news/index.html","id":"igniter-010","dir":"Changelog","previous_headings":"","what":"igniteR 0.1.0","title":"igniteR 0.1.0","text":"Initial build release. Beta version testing feedback.","code":""}]
